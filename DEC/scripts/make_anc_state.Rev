# To run this script on the command line, type
# rb make_anc_state.Rev
# And on RevBayes, type:
# source("make_anc_state.Rev")

# First, assign some helper variables

out_str = "output/simple"

out_state_fn = out_str + ".states.log"

out_phy_fn   = out_str + ".tre"
out_mcc_fn   = out_str + ".mcc.tre"

# We build a maximum clade credibility tree from the posterior tree distribution, discarding the first 25% of samples
tree_trace = readTreeTrace(file=out_phy_fn, treetype="clock")
tree_trace.setBurnin(0.25)
mcc_tree = mccTree(tree_trace, file=out_mcc_fn, mean=false)

# Get the ancestral state trace from simple.states.log
state_trace = readAncestralStateTrace(file=out_state_fn)

# Get the ancestral state tree trace from simple.tre. It is important to use `readAncestralTreeTrace` and not `readTreeTrace`, as in the phylogenetic exercises to properly annotate the tree with ancestral states.

state_tree_trace = readAncestralStateTreeTrace(file=out_phy_fn, treetype="clock")

# Apply burnin to remove samples before the MCMC reaches stationarity
n_burn = floor(0.25 * state_tree_trace.getNumberSamples())

# Finally, compute and save the ancestral state tree as `simple.ase.tre`.
anc_tree = ancestralStateTree(tree=mcc_tree,
                              ancestral_state_trace_vector=state_trace,
                              tree_trace=state_tree_trace,
                              include_start_states=true,
                              file=out_str+".ase.tre",
                              burnin=n_burn,
                              summary_statistic="MAP",
                              site=1)

# exit RevBayes
quit()
                             
